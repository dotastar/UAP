Airbnb电面是在一个类似于LeetCode的网站写完直接运行test的，test还是在main函数里自己写，不是像LeetCode那样自动test
https://hellosmallworld123.wordpress.com/2015/09/04/abnb-%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/
电面

别人的总结，其中有一两道题我这里没有，还有一些答案
http://buttercola.blogspot.com/search/label/Airbnb


1. CSV Reader/ Parse an escaped string into csv format. 
举个例子，给定一个CSV文件，格式是 “some_name|some_address|some_phone|some_job”，要求输出Json format “{name:some_name, address:some_addres,phone:some_phone, job:some_job}”
/*
John,Smith,john.smith@gmail.com,Los Angeles,1
Jane,Roberts,janer@msn.com,"San Francisco, CA",0
"Alexandra ""Alex""",Menendez,alex.menendez@gmail.com,Miami,1
"""Alexandra Alex"""
John|Smith|john.smith@gmail.com|Los Angeles|1
Jane|Roberts|janer@msn.com|San Francisco, CA|0
Alexandra "Alex"|Menendez|alex.menendez@gmail.com|Miami|1
"Alexandra Alex"
*/

2. Given a 2-D int array, write an iterator that traverses it   from left to right and top to bottom. The iterator has 2 methods - boolean hasNext() and int next(). The array can have rows of different sizes, so for e.g. 1, 2, 4, 5 5, 6 <null/empty>, 10, 40, 50 The 2D int array was represented as ArrayList<ArrayList<Integer>>().
3.  Given An array of strings where "L" indicates land and "W" indicates water, and a coordinate marking a starting point in the middle of the ocean
4. palindrome pair
Given a list of unique words. Find all pairs of indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.
http://lcoj.tk/problems/palindrome-pairs-dietpepsi-draft/
5. 不相邻的range 求和最大 [check-in date, check-out date/ check-in date, check-out date/ check-in date,….]求最多能租出去几天。
给一堆租房的request，作为输入数组，找一个array subset，其中任意两个元素不能相邻，（因为要打扫房间），求使得子集里所有元素之和最大。一维DP解之，另外可以使用滚动数组让空间开销为常数。(给一个整数数组，求不相互挨着的数字可以想加得到的最大和)
6. 第一轮实现分页显示。给了以下一些输入数据，要求将以下行分页显示，每页12行，其中每行已经按score排好序，分页显示的时候如果有相同host id的行，则将后面同host id的行移到下一页。


7.
/*
Given an array of numbers A = [x1, x2, …, xn] and T = Round(x1+x2+… +xn). 
We want to find a way to round each element in A such that after rounding we get a new array B = [y1, y2, …., yn] such that y1+y2+…+yn = T where yi = Floor(xi) or Ceil(xi), ceiling or floor of xi.
We also want to minimize sum |x_i-y_i|
*/
x1 can be double or float也行。然后还要考虑正负。
先将所有的x取floor， 然后T - sum（floor（x）） 得到多少个x需要ceil
2. 按照小数部分将数组排序，从大到小ceil，其他的floor。 最后就是想要的结果。
负数的时候 看code，不用区别对待

8.
Given a method decode(testEncStr) which will return the decoded int id if testEncStr is decodeable or will throw an exception
(or return null) if not, implement a new method decodeFind(String badEncStr) which takes a string and returns the decoded int id
Often, 
we want to encode raw IDs in our database by hiding them behind some 
2-way decodeable hash. So, a URL which would have at one time been:

Needs 50 credits to show a link.

becomes

Needs 50 credits to show a link.

We decode the ID kljJJ324hjkS_ to 848662 on our backend and serve the 
relevant content. at some point, we start getting 404 errors from clients 
requesting a certain URL of the form

Needs 50 credits to show a link.

This can happen if certain clients, email services, or url shorteners "
sanitize" the url. Unfortunately, this change breaks decoding and the 
resource cannot be found.
To assess how big of a deal this is, we may want to recover the IDs of the 
targets that were 404ing.

Your task:
Given a method decode(testEncStr) which will return the decoded int id if 
testEncStr is decodeable or will throw an exception or return null (
depending on the language) if not, implement a new method decodeFind(String 
badEncStr) which takes a string and returns the decoded int id.


9.
K Sum I && II – Lintcode Java k sum closest
http://blog.welkinlan.com/2015/08/20/k-sum-i-ii-lintcode-java/

10. coding 
扫雷游戏。一个n*m棋盘，要我随机放置k个地雷，然后将棋盘根据扫雷规则把棋盘用数字填满。最后问了时间复杂度，因为是随机的，所以不太会分析，给了一个best case. 最后问了如何测试，我扯了白盒黑盒测试。就是那些code coverange啊，input partition什么的。

11. 基础知识  ??
输入URL会怎么样，我把知道的全部说了，比如说DNS怎么工作，Cache怎么工作，Page Rendering. 
数据库查询慢为啥，怎么解决。Index，只能想到这个。 
DNS 工作原理，顺便扯了一些如何用DNS做Load balancing以及location定位 
Cookie相关知识，顺便说了一些设计到的privacy 


12. 上来直接做题，Leetcode原题：
Text Justification


Phone - 1 CSV Reader
/*
John,Smith,john.smith@gmail.com,Los Angeles,1
Jane,Roberts,janer@msn.com,"San Francisco, CA",0
"Alexandra ""Alex""",Menendez,alex.menendez@gmail.com,Miami,1
"""Alexandra Alex"""
John|Smith|john.smith@gmail.com|Los Angeles|1
Jane|Roberts|janer@msn.com|San Francisco, CA|0
Alexandra "Alex"|Menendez|alex.menendez@gmail.com|Miami|1
"Alexandra Alex"
*/
×Close

#include<iostream>
#include<vector>
#include<string>

using namespace std;

vector<string> decode_CSV(string csv) {
    vector<string> elems;
    bool inQuote = false;
    string buffer;
    for (int i=0; i<csv.length(); i++) {
        if (inQuote) {
            if (csv[i] == '"') {
                if (i == csv.length()-1) {
                    elems.push_back(buffer);
                    buffer = ""; 
                } else if (csv[i+1] == '"'){
                    buffer += csv[i+1];
                    i++;
                } else {
                    inQuote = false;
                }   
            } else
                buffer += csv[i];
        } else {
            if (csv[i] == '"') {
                inQuote = true;
            } else if (csv[i] == ',') {
                elems.push_back(buffer);
                buffer = ""; 
            } else
                buffer += csv[i];
        }   
    }   
    if (buffer.length()) elems.push_back(buffer);
    return elems;
}

string encode_CSV(vector<string> elems) {
    string res;
    for (auto s : elems) {
        res += s+"|";
    }   
    return res.substr(0, res.length()-1);
}

int main() {
    string csv1 = "John,Smith,john.smith@gmail.com,Los Angeles,1";
    string csv2 = "Jane,Roberts,janer@msn.com,\"San Francisco, CA\",0";
    string csv3 = "\"Alexandra \"\"Alex\"\"\",Menendez,alex.menendez@gmail.com,Miami,1";
    string csv4 = "\"\"\"Alexandra Alex\"\"\"";
    cout << encode_CSV(decode_CSV(csv1)) << endl;
    cout << encode_CSV(decode_CSV(csv2)) << endl;
    cout << encode_CSV(decode_CSV(csv3)) << endl;
    cout << encode_CSV(decode_CSV(csv4)) << endl;


    return 0;    
}




PHONE - 3
Given An array of strings where "L" indicates land and "W" indicates water, and a coordinate marking a starting point in the middle of the ocean
The Challenge:
Find and mark the ocean in the map by changing appropriate W's to O's. An ocean coordinate is defined to be any coordinate directly adjacent to any other ocean coordinate.
https://github.com/naveen-tirupattur/Interviews/blob/master/Interviews/src/my/interview/samples/AirBnB.java
 
 
Phone - 4. Palindromic pair of a list of strings
Given a list of strings, find all the palindromic pairs of the string and output the concatenated palindrome.

e.g. [abc, cba], output is abccba, cbaabc.
e.g. [aabc, cb], output is cbaabc

Understand the problem:
The brute-force solution to this problem is very simple. For each word, we search all the others and see if it can form a palindrome. Assume that the ave. length of each word is m and there are totally n words in the list, the time complexity would be O(n^2 * m). 

Solution:
1. Put all the reversed order of the input string into a Map. The key is the reversed order of the string, and the value is the indices of the word
2. For each word, get all its prefixes, If the prefix is in the map AND the rest of the string is a palindrome, then we can find a pair where the first half is the current word, and the second half is the reversed order of prefix.
3. For each word, get all its postfixes. If the postfix is in the map AND the first half of the string is palindrome, then we can find a pair where the reversed order of the postfix is the first part, and the word is the second part of the pair. 

The reason why we need to track the position of each word is to avoid the situation like ["c"], i.e. the word itself is a palindrome. Then we may mistakely concatenate a "cc" as a palindrome. So we can concatenate two words IFF
1. The key in the map is different from the current word
2. If they are the same, they must have different indices. 

Code (Java):

import java.io.*;
import java.util.*;
 
public class Solution{
  List<String> getPalindromaticPairs(String[] input) {
    Set<String> result = new HashSet<>();
    if (input == null || input.length == 0) {
      return new ArrayList<>();
    }
     
    // Step 1: put the reversed order of each word into the map
    Map<String, List<Integer>> map = new HashMap<>();
     
    for (int i = 0; i < input.length; i++) {
      String str = input[i];
      String reStr = reverse(str);
      if (!map.containsKey(reStr)) {
        List<Integer> indices = new ArrayList<>();
        indices.add(i);
        map.put(reStr, indices);
      } else {
        List<Integer> indices = map.get(reStr);
        indices.add(i);
      }
    }
     
    // Step 2: Iterate each word
    for (int i = 0; i < input.length; i++) {
      String str = input[i];
       
      // Get all the prefix of str, and append to the end
      for (int j = 1; j <= str.length(); j++) {
        String prefix = str.substring(0, j);
        String postfix = str.substring(j);
         
        if (map.containsKey(prefix) && isPalindrome(postfix)) {
          if (map.get(prefix).size() > 1 || !map.get(prefix).equals(str)) {
            String palin = str + reverse(prefix);
            result.add(palin);
          }
        }
      }
       
      // Get all postfix of the str, and insert to front
      for (int j = str.length() - 1; j >= 0; j--) {
        String postfix = str.substring(j);
        String prefix = str.substring(0, j);
         
        if (map.containsKey(postfix) && isPalindrome(prefix)) {
          if (map.get(postfix).size() > 1 || !map.get(postfix).equals(str)) {
            String palin = reverse(postfix) + str;
            result.add(palin);
          }
        }
      }
    }
     
    return new ArrayList<String>(result);
  }
   
  private String reverse(String s) {
    if (s == null || s.length() <= 1) {
      return s;
    }
     
    char[] array = s.toCharArray();
    int lo = 0;
    int hi = array.length - 1;
    while (lo < hi) {
      char temp = array[lo];
      array[lo] = array[hi];
      array[hi] = temp;
       
      lo++;
      hi--;
    }
     
    return new String(array);
  }
   
  private boolean isPalindrome(String s) {
    if (s == null || s.length() <= 1) {
      return true;
    }
     
    int lo = 0;
    int hi = s.length() - 1;
     
    while (lo < hi) {
      if (s.charAt(lo) != s.charAt(hi)) {
        return false;
      }
       
      lo++;
      hi--;
    }
     
    return true;
  }
   
  public static void main(String[] args) {
    Solution solution = new Solution();
    String[] input = new String[]{"abc", "cba", "c", "c"};
     
    List<String> result = solution.getPalindromaticPairs(input);
     
    for (String s : result) {
      System.out.println(s);
    }
  }
}


PHONE -5 
给一个数组代表reservation request，suppose start date, end date back to back.
比如[5,1,1,5]代表如下预定：
Jul 1-Jul6
Jul6-Jul7
Jul7-Jul8
jul8-Jul13
当然最开始那个Jul 1是随便选就好的啦。
现在input的意义搞清楚了。还有一个限制，就是退房跟开始不能是同一天，比如如果接了Jul 1-Jul6，Jul6-Jul7就不能接了。
那问题就是给你个数组，算算最多能把房子租出去多少天。这个例子的话就是10天。
[4,9,6]=10
[4,10,3,1,5]=15
思路是用DP，我解题的code：
private static int getMax(int[] requests){
int len=requests.length;
8 b0 C6 q8 t% Z5 y) S: B2 j* y
int first=0;
int second=0;
for(int i=0;i int temp=Math.max(requests+first,second);
first=second;
second=temp;
}
return second;
}


PHONE- 6
第一轮实现分页显示。给了以下一些输入数据，要求将以下行分页显示，每页12行，其中每行已经按score排好序，分页显示的时候如果有相同host id的行，则将后面同host id的行移到下一页。

[

"host_id,listing_id,score,city",

"1,28,300.1,SanFrancisco",

"4,5,209.1,SanFrancisco",

"20,7,208.1,SanFrancisco",

"23,8,207.1,SanFrancisco",

"16,10,206.1,Oakland",

"1,16,205.1,SanFrancisco",

"6,29,204.1,SanFrancisco",

"7,20,203.1,SanFrancisco",

"8,21,202.1,SanFrancisco",

"2,18,201.1,SanFrancisco",

"2,30,200.1,SanFrancisco",

"15,27,109.1,Oakland",

"10,13,108.1,Oakland",

"11,26,107.1,Oakland",

"12,9,106.1,Oakland",

"13,1,105.1,Oakland",

"22,17,104.1,Oakland",

"1,2,103.1,Oakland",

"28,24,102.1,Oakland",

"18,14,11.1,SanJose",

"6,25,10.1,Oakland",

"19,15,9.1,SanJose",

"3,19,8.1,SanJose",

"3,11,7.1,Oakland",

"27,12,6.1,Oakland",

"1,3,5.1,Oakland",

"25,4,4.1,SanJose",

"5,6,3.1,SanJose",

"29,22,2.1,SanJose",

"30,23,1.1,SanJose"

]


这题的思路不难，但是实现起来还是有点难度的。在遍历的时候需要维护一个LinkedHashMap作为page并且完成去重。用LinkedHashMap的好处是可以保证所有的entry是按插入的顺序排序的，所以仍然可以保证按score排序的性质。另外，一旦遇到相同的host_id，则将其对应的行存到另一个buffer里。由于需要变遍历边增减容器里的数据，需要用ListIterator，并调用remove和add方法。之前只用过remove，从来没用过add。


7.
public class Float_Ceil_or_Floor {
	// 思路就是先把所有floor加起来，然后看差多少，然后把多少个floor转成ceil
	// 转的时候按照num本身与ceil的距离排序
	public static int[] getNearlyArrayWithSameSum(double[] arr) {
		NumWithDiff[] arrWithDiff = new NumWithDiff[arr.length];
		double sum = 0.0;
		int floorSum = 0;
		for (int i = 0; i < arr.length; i++) {
			int floor = (int)arr[i];
			int ceil = floor;
			if (floor < arr[i]) ceil++; // 查是不是4.0这种floor/ceil都是本身的
			floorSum += floor;
			sum += arr[i];
			arrWithDiff[i] = new NumWithDiff(ceil, ceil - arr[i]); // 把ceil都放在数组里面进行比较
		}
		int num = (int) Math.round(sum);
		int diff = num - floorSum;
		Arrays.sort(arrWithDiff, new Comparator() {
			public int compare(NumWithDiff n1, NumWithDiff n2) {
				if (n1.diffWithCeil <= n2.diffWithCeil) return -1;
				else return 1;
			}
		});
		int[] res = new int[arr.length];
		int i = 0;
		for (; i < diff; i++) {
			res[i] = arrWithDiff[i].num; // 这些放ceil
		}
		for (; i < arr.length; i++) {
			res[i] = arrWithDiff[i].num - 1; // 剩下的只放floor
		}
		return res;
	}
	public static void main(String[] args) {
		double[] arr = { 1.2, 3.7, 2.3, 4.8 };
		int[] res = getNearlyArrayWithSameSum(arr);
		for (int i : res) System.out.print(i + " ");
		
	}
}
class NumWithDiff {
	int num;
	double diffWithCeil;
	public NumWithDiff(int n, double c) {
		this.num = n;
		this.diffWithCeil = c;
	}
}


8.
string decode(string encStr);
// string in C++ is not an object, so it cannot return NULL. I assume it return empty string if the encStr is not decodable. 

string decodeFind(string &s, int i) {
    if (i == s.length()) 
        return decode(s);

    string decStr;

    decStr = decode(s);
    if (decStr.length())
        return decStr;

    s[i] = tolower(s[i]);
    decStr = decodeFind(s, i+1);
    if (decStr.length())
        return decStr;

    s[i] = toupper(s[i]);
    decStr = decodeFind(s, i+1);
    if (decStr.length());
        return decStr;

    return ""; 
}
